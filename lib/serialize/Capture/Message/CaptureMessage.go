// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CaptureMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsCaptureMessage(buf []byte, offset flatbuffers.UOffsetT) *CaptureMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CaptureMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CaptureMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CaptureMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CaptureMessage) CapImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CaptureMessage) FaceImage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CaptureMessage) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CaptureMessage) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CaptureMessage) Track() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CaptureMessage) MutateTrack(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *CaptureMessage) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CaptureMessage) SequenceNumber() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CaptureMessage) MutateSequenceNumber(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func CaptureMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CaptureMessageAddCapImage(builder *flatbuffers.Builder, capImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(capImage), 0)
}
func CaptureMessageAddFaceImage(builder *flatbuffers.Builder, faceImage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(faceImage), 0)
}
func CaptureMessageAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(2, timestamp, 0)
}
func CaptureMessageAddTrack(builder *flatbuffers.Builder, track int32) {
	builder.PrependInt32Slot(3, track, 0)
}
func CaptureMessageAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func CaptureMessageAddSequenceNumber(builder *flatbuffers.Builder, sequenceNumber int64) {
	builder.PrependInt64Slot(5, sequenceNumber, 0)
}
func CaptureMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
